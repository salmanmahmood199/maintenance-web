diff --git a/src/App.js b/src/App.js
index 164f39d..38dcbc4 100644
--- a/src/App.js
+++ b/src/App.js
@@ -128,7 +128,7 @@ function App() {
               <Route 
                 path="/vendors/:id" 
                 element={
-                  <ProtectedRoute requiredPermissions={['subadmin.addVendor', 'subadmin.manageVendors']}>
+                  <ProtectedRoute>
                     <Layout>
                       <VendorDetail />
                     </Layout>
diff --git a/src/components/Layout.js b/src/components/Layout.js
index 7f032d9..fef8f50 100644
--- a/src/components/Layout.js
+++ b/src/components/Layout.js
@@ -1,4 +1,5 @@
 import React, { useState, useEffect } from 'react';
+import VendorSidebar from './VendorSidebar';
 import { 
   AppBar, 
   Box, 
@@ -74,13 +75,17 @@ const Layout = ({ children }) => {
     }
   }, [params, location.pathname, getOrganization]);
   
-  // Always visible root navigation items
-  const rootNavItems = [
-    { text: 'Home', icon: <HomeIcon />, path: '/dashboard' },
-    { text: 'Organizations', icon: <BusinessIcon />, path: '/organizations' },
-    { text: 'Vendors', icon: <VendorIcon />, path: '/vendors' }
+  // Root navigation items - filtered by user role
+  const allRootNavItems = [
+    { text: 'Home', icon: <HomeIcon />, path: '/dashboard', roles: ['root', 'subadmin', 'vendor', 'technician'] },
+    { text: 'Organizations', icon: <BusinessIcon />, path: '/organizations', roles: ['root', 'subadmin'] },
+    { text: 'Vendors', icon: <VendorIcon />, path: '/vendors', roles: ['root', 'subadmin'] },
+    { text: 'Tickets', icon: <TicketIcon />, path: '/tickets', roles: ['vendor', 'technician'] }
   ];
   
+  // Filter items based on user role
+  const rootNavItems = allRootNavItems.filter(item => item.roles.includes(user?.role));
+  
   // Organization menu items - these should align with tabs
   const orgContextNavItems = [
     { 
@@ -136,15 +141,15 @@ const Layout = ({ children }) => {
 
   // Handle navigate and close drawer (for mobile)
   const handleNavigate = (path, tabIndex = null) => {
-    // For organization tabs, save the tab index in localStorage
-    if (tabIndex !== null) {
-      localStorage.setItem('orgDetailTab', tabIndex);
-    }
-    
-    // Navigate to the path
     navigate(path);
     
-    // Close mobile drawer if on mobile
+    // If we have a tab index, store it in local storage
+    // This is used by organization detail to know which tab to activate
+    if (tabIndex !== null && path.includes('/organizations/')) {
+      localStorage.setItem('orgDetailTab', tabIndex.toString());
+    }
+    
+    // Close drawer on navigation (mobile only)
     if (isMobile) {
       setMobileOpen(false);
     }
@@ -156,45 +161,46 @@ const Layout = ({ children }) => {
     navigate('/login');
   };
 
-  // Drawer content
-  const drawerContent = (
-    <>
-      <Toolbar>
-        <Typography variant="h6" noWrap component="div">
-          Taskscout
-        </Typography>
-      </Toolbar>
-      <Divider />
-      <List>
-        {/* Always visible root navigation */}
-        {rootNavItems.map((item) => {
-          // Check permissions for this menu item
-          const requiredPermissions = menuPermissionMap[item.path] || [];
-          
-          return (
-            <PermissionGuard
-              key={item.text}
-              permissions={requiredPermissions}
-              requireAll={false}
-              fallback={null}
-            >
-              <ListItem 
-                button 
-                key={item.text} 
-                onClick={() => handleNavigate(item.path)}
-                selected={location.pathname === item.path}
-                sx={{
-                  '&.Mui-selected': {
-                    backgroundColor: theme.palette.action.selected,
-                  }
-                }}
+  // Render navigation based on user role
+  const renderNavigation = () => {
+    // For vendor users, show the special vendor sidebar
+    if (user?.role === 'vendor') {
+      return <VendorSidebar vendorId={user?.id} />;
+    }
+    
+    // For all other users, show the normal navigation
+    return (
+      <>
+        <List>
+          {/* Main navigation items */}
+          {rootNavItems.map((item) => {
+            // Check permissions for this menu item
+            const requiredPermissions = menuPermissionMap[item.path] || [];
+            
+            return (
+              <PermissionGuard
+                key={item.text}
+                permissions={requiredPermissions}
+                requireAll={false}
+                fallback={null}
               >
-                <ListItemIcon>{item.icon}</ListItemIcon>
-                <ListItemText primary={item.text} />
-              </ListItem>
-            </PermissionGuard>
-          );
-        })}
+                <ListItem 
+                  button 
+                  onClick={() => handleNavigate(item.path)}
+                  selected={location.pathname === item.path}
+                  sx={{
+                    '&.Mui-selected': {
+                      backgroundColor: theme.palette.action.selected,
+                    }
+                  }}
+                >
+                  <ListItemIcon>{item.icon}</ListItemIcon>
+                  <ListItemText primary={item.text} />
+                </ListItem>
+              </PermissionGuard>
+            );
+          })}
+        </List>
         
         {/* Organization context menu - aligns with tabs */}
         {inOrgContext && (
@@ -219,7 +225,6 @@ const Layout = ({ children }) => {
                 >
                   <ListItem 
                     button 
-                    key={item.text} 
                     onClick={() => handleNavigate(item.path, item.tabIndex)}
                     selected={location.pathname === item.path}
                     sx={{
@@ -236,7 +241,20 @@ const Layout = ({ children }) => {
             })}
           </>
         )}
-      </List>
+      </>
+    );
+  };
+
+  // Drawer content
+  const drawerContent = (
+    <>
+      <Toolbar>
+        <Typography variant="h6" noWrap component="div">
+          Taskscout
+        </Typography>
+      </Toolbar>
+      <Divider />
+      {renderNavigation()}
     </>
   );
 
diff --git a/src/context/DataContext.js b/src/context/DataContext.js
index 546d024..7d00586 100644
--- a/src/context/DataContext.js
+++ b/src/context/DataContext.js
@@ -586,6 +586,12 @@ export const DataProvider = ({ children }) => {
       ? getItems('tickets', ticket => ticket.locationId === locationId)
       : getItems('tickets');
   
+  // Get tickets assigned to a specific vendor
+  const getVendorTickets = (vendorId) => {
+    if (!vendorId) return [];
+    return getItems('tickets', ticket => ticket.vendorId === vendorId);
+  };
+  
   // Workflow functions for tickets
   
   // Approve a ticket (admin approval)
@@ -617,6 +623,31 @@ export const DataProvider = ({ children }) => {
     });
   };
   
+  // Accept a ticket by an organization admin/member
+  const acceptTicket = (id, userId) => {
+    const ticket = getTicket(id);
+    if (!ticket) throw new Error('Ticket not found');
+    
+    const user = getItem('users', userId);
+    if (!user) throw new Error('User not found');
+    
+    updateTicket(id, {
+      ...ticket,
+      status: 'Accepted',
+      acceptedBy: userId,
+      acceptedAt: new Date().toISOString(),
+      history: [
+        ...(ticket.history || []),
+        {
+          action: 'accepted',
+          timestamp: new Date().toISOString(),
+          userId,
+          userName: user.name || user.email
+        }
+      ]
+    });
+  };
+
   // Assign a ticket to a vendor
   const assignTicket = (id, vendorId) => {
     const ticket = getTicket(id);
@@ -635,12 +666,37 @@ export const DataProvider = ({ children }) => {
         {
           action: 'assigned',
           timestamp: new Date().toISOString(),
-          vendorId
+          vendorId,
+          vendorName: vendor.name
         }
       ]
     });
   };
-  
+
+  // Assign a technician to a ticket (from vendor side)
+  const assignTechnician = (id, technicianId) => {
+    const ticket = getTicket(id);
+    if (!ticket) throw new Error('Ticket not found');
+    
+    const technician = getItem('technicians', technicianId);
+    if (!technician) throw new Error('Technician not found');
+    
+    updateTicket(id, {
+      ...ticket,
+      technicianId,
+      assignedToTechnicianAt: new Date().toISOString(),
+      history: [
+        ...(ticket.history || []),
+        {
+          action: 'technician_assigned',
+          timestamp: new Date().toISOString(),
+          technicianId,
+          technicianName: technician.name
+        }
+      ]
+    });
+  };
+
   // Create work order
   const createWorkOrder = (id, workOrderDetails = {}) => {
     const ticket = getTicket(id);
@@ -976,10 +1032,13 @@ export const DataProvider = ({ children }) => {
     deleteTicket,
     getTicket,
     getTickets,
+    getVendorTickets,
     
     // Ticket Workflow
     approveTicket,
+    acceptTicket,
     assignTicket,
+    assignTechnician,
     createWorkOrder,
     startWork,
     pauseWork,
diff --git a/src/pages/RootDashboard.js b/src/pages/RootDashboard.js
index 4ab52cd..6b9fb6c 100644
--- a/src/pages/RootDashboard.js
+++ b/src/pages/RootDashboard.js
@@ -367,12 +367,20 @@ const RootDashboard = () => {
                 </TableHead>
                 <TableBody>
                   {filteredVendors?.slice(0, 5).map((vendor) => {
-                    // Get organizations linked to this vendor
                     const linkedOrgs = data?.organizations?.filter(org => 
-                      vendor.orgIds?.includes(org.id)) || [];
+                      vendor.orgIds?.includes(org.id)
+                    ) || [];
                     
                     return (
-                      <TableRow key={vendor.id} hover onClick={() => navigate(`/vendors/${vendor.id}`)}>
+                      <TableRow 
+                        key={vendor.id} 
+                        onClick={() => navigate(`/vendors/${vendor.id}`)} 
+                        sx={{ 
+                          cursor: 'pointer',
+                          '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' },
+                          transition: 'background-color 0.2s'
+                        }}
+                      >
                         <TableCell>
                           <Box sx={{ display: 'flex', alignItems: 'center' }}>
                             <VendorIcon sx={{ mr: 1, color: '#f50057' }} />
diff --git a/src/pages/Tickets.js b/src/pages/Tickets.js
index 7d870b1..1b6aa10 100644
--- a/src/pages/Tickets.js
+++ b/src/pages/Tickets.js
@@ -63,6 +63,7 @@ const ISSUE_TYPES = [
 // Status colors
 const STATUS_COLORS = {
   'New': 'error',
+  'Accepted': 'info',
   'Assigned': 'warning',
   'In Progress': 'info',
   'Paused': 'default',
@@ -73,8 +74,9 @@ const STATUS_COLORS = {
 // Ticket workflow stages
 const TICKET_WORKFLOW = [
   { key: 'created', label: 'Ticket Placed', description: 'Maintenance request submitted', status: 'New' },
-  { key: 'pending_approval', label: 'Pending Approval', description: 'Waiting for approval from admin', status: 'New' },
+  { key: 'accepted', label: 'Ticket Accepted', description: 'Ticket accepted by organization', status: 'Accepted' },
   { key: 'assigned', label: 'Vendor Assigned', description: 'Ticket assigned to vendor', status: 'Assigned' },
+  { key: 'technician_assigned', label: 'Technician Assigned', description: 'Vendor assigned a technician', status: 'Assigned' },
   { key: 'work_order', label: 'Work Order Created', description: 'Vendor created work order', status: 'Assigned' },
   { key: 'in_progress', label: 'Work In Progress', description: 'Vendor is working on the issue', status: 'In Progress' },
   { key: 'invoice_uploaded', label: 'Invoice Uploaded', description: 'Work completed and invoice uploaded', status: 'Completed' },
@@ -90,13 +92,16 @@ const Tickets = () => {
     getVendors,
     getLocations,
     getTicket,
+    acceptTicket,
     assignTicket,
+    assignTechnician,
     startWork,
     pauseWork,
     completeWork,
     verifyCompletion,
     hasLocationAccess,
-    getAccessibleLocations
+    getAccessibleLocations,
+    getTechnicians
   } = useData();
 
   // States
@@ -107,6 +112,8 @@ const Tickets = () => {
   const [actionType, setActionType] = useState(null);
   const [actionNote, setActionNote] = useState('');
   const [selectedVendor, setSelectedVendor] = useState('');
+  const [selectedTechnician, setSelectedTechnician] = useState('');
+  const [technicians, setTechnicians] = useState([]);
   
   // Generate a temporary ticket number for preview
   const generateTempTicketNo = () => {
@@ -227,10 +234,9 @@ const Tickets = () => {
   const [selectedFiles, setSelectedFiles] = useState([]);
   const [filePreviewUrls, setFilePreviewUrls] = useState([]);
 
-  // Fetch data when component mounts
-  useEffect(() => {
-    const fetchData = async () => {
-      try {
+  // Fetch data function
+  const fetchData = async () => {
+    try {
         // Get available locations based on user role
         let availableLocations = [];
         if (currentUser?.role === 'subadmin') {
@@ -278,12 +284,13 @@ const Tickets = () => {
     };
     
     fetchData();
-  }, [getTickets, getLocations, getVendors, getAccessibleLocations, currentUser]);
+  }, []); // Using external fetchData function, dependencies moved outside
   
   // Apply filters when filters change or tickets change
   useEffect(() => {
     applyFilters();
-  }, [applyFilters, tickets]);
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [tickets, filters]);
 
   // Handle input change
   const handleChange = (e) => {
@@ -459,141 +466,210 @@ const Tickets = () => {
     setActionType(type);
     setActionNote('');
     setSelectedVendor('');
+    setSelectedTechnician('');
+    
+    // Load technicians if action type is assign_tech
+    if (type === 'assign_tech' && selectedTicket && selectedTicket.vendorId) {
+      const vendorTechs = getTechnicians(selectedTicket.vendorId);
+      setTechnicians(vendorTechs || []);
+    }
+    
     setActionDialogOpen(true);
   };
-
+  
   // Handle action dialog close
   const handleCloseActionDialog = () => {
     setActionDialogOpen(false);
     setActionType(null);
   };
-
+  
   // Handle action submission
-  const handleActionSubmit = async () => {
+  const handleActionSubmit = () => {
     if (!selectedTicket) return;
     
-    try {
-      switch (actionType) {
-        case 'assign':
-          await assignTicket(selectedTicket.id, selectedVendor);
-          break;
-        case 'start':
-          await startWork(selectedTicket.id);
-          break;
-        case 'pause':
-          await pauseWork(selectedTicket.id, actionNote);
-          break;
-        case 'complete':
-          await completeWork(selectedTicket.id, actionNote);
-          break;
-        case 'verify':
-          await verifyCompletion(selectedTicket.id);
-          break;
-        default:
-          break;
-      }
-      
-      // Refresh tickets data after action
-      const newTickets = await getTickets();
-      setTickets(newTickets || []);
-      
-      // Get updated ticket info
-      const updatedTicket = await getTicket(selectedTicket.id);
+    switch (actionType) {
+      case 'accept':
+        acceptTicket(selectedTicket.id, user.id);
+        break;
+      case 'assign':
+        if (selectedVendor) {
+          assignTicket(selectedTicket.id, selectedVendor);
+        }
+        break;
+      case 'assign_tech':
+        if (selectedTechnician) {
+          assignTechnician(selectedTicket.id, selectedTechnician);
+        }
+        break;
+      case 'start':
+        startWork(selectedTicket.id);
+        break;
+      case 'pause':
+        pauseWork(selectedTicket.id, actionNote);
+        break;
+      case 'complete':
+        completeWork(selectedTicket.id, actionNote);
+        break;
+      case 'verify':
+        verifyCompletion(selectedTicket.id);
+        break;
+      default:
+        break;
+    }
+    
+    // Close the dialog and update the ticket list
+    handleCloseActionDialog();
+    
+    // Refresh the data
+    fetchData();
+    
+    // Update the selected ticket
+    if (selectedTicket) {
+      const updatedTicket = getTicket(selectedTicket.id);
       setSelectedTicket(updatedTicket);
-      
-      handleCloseActionDialog();
-    } catch (error) {
-      console.error(`Error processing ${actionType} action:`, error);
-      alert(`Error: ${error.message}`);
-      handleCloseActionDialog();
     }
   };
 
-  // Render action buttons based on ticket status
   const renderActionButtons = (ticket) => {
-    const { status } = ticket;
+    const status = ticket.status;
+    const buttons = [];
     
-    // For MVP, allow any action regardless of role
-    switch (status) {
-      case 'New':
-        return (
-          <Button
-            variant="contained"
-            startIcon={<AssignIcon />}
-            onClick={() => handleActionClick('assign')}
-            fullWidth
-            sx={{ mb: 1 }}
-          >
-            Assign to Vendor
-          </Button>
-        );
-      case 'Assigned':
-        return (
-          <Button
-            variant="contained"
+    // Check user role and permissions
+    const isAdmin = user.role === 'root' || user.role === 'subadmin';
+    const isVendor = user.role === 'vendor';
+    const isVendorAssigned = isVendor && ticket.vendorId === user.vendorId;
+    
+    // Organization member can accept new tickets first
+    if (isAdmin && status === 'New' && !ticket.acceptedBy) {
+      buttons.push(
+        <Tooltip title="Accept ticket" key="accept">
+          <IconButton
             color="info"
-            startIcon={<StartIcon />}
-            onClick={() => handleActionClick('start')}
-            fullWidth
-            sx={{ mb: 1 }}
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('accept');
+            }}
           >
-            Start Work
-          </Button>
-        );
-      case 'In Progress':
-        return (
-          <Box>
-            <Button
-              variant="contained"
-              color="warning"
-              startIcon={<PauseIcon />}
-              onClick={() => handleActionClick('pause')}
-              fullWidth
-              sx={{ mb: 1 }}
-            >
-              Pause Work
-            </Button>
-            <Button
-              variant="contained"
-              color="success"
-              startIcon={<CompleteIcon />}
-              onClick={() => handleActionClick('complete')}
-              fullWidth
-              sx={{ mb: 1 }}
-            >
-              Complete Work
-            </Button>
-          </Box>
-        );
-      case 'Paused':
-        return (
-          <Button
-            variant="contained"
-            color="info"
-            startIcon={<StartIcon />}
-            onClick={() => handleActionClick('start')}
-            fullWidth
-            sx={{ mb: 1 }}
+            <CheckCircleIcon />
+          </IconButton>
+        </Tooltip>
+      );
+    }
+    
+    // Admin can assign accepted tickets to vendors
+    if (isAdmin && (status === 'New' || status === 'Accepted') && !ticket.vendorId) {
+      buttons.push(
+        <Tooltip title="Assign to vendor" key="assign">
+          <IconButton
+            color="primary"
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('assign');
+            }}
           >
-            Resume Work
-          </Button>
-        );
-      case 'Completed':
-        return (
-          <Button
-            variant="contained"
+            <AssignIcon />
+          </IconButton>
+        </Tooltip>
+      );
+    }
+    
+    // Vendor can assign technician to tickets assigned to them
+    if (isVendorAssigned && status === 'Assigned' && !ticket.technicianId) {
+      buttons.push(
+        <Tooltip title="Assign technician" key="assign_tech">
+          <IconButton
             color="secondary"
-            startIcon={<VerifyIcon />}
-            onClick={() => handleActionClick('verify')}
-            fullWidth
-            sx={{ mb: 1 }}
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('assign_tech');
+            }}
           >
-            Verify Completion
-          </Button>
-        );
-      default:
-        return null;
+            <PersonIcon />
+          </IconButton>
+        </Tooltip>
+      );
     }
+    
+    // Vendor can start work on assigned tickets with a technician assigned
+    if (isVendorAssigned && status === 'Assigned' && ticket.technicianId) {
+      buttons.push(
+        <Tooltip title="Start work" key="start">
+          <IconButton
+            color="primary"
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('start');
+            }}
+          >
+            <StartIcon />
+          </IconButton>
+        </Tooltip>
+      );
+    }
+    
+    // Vendor can pause work in progress
+    if (isVendorAssigned && status === 'In Progress') {
+      buttons.push(
+        <Tooltip title="Pause work" key="pause">
+          <IconButton
+            color="warning"
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('pause');
+            }}
+          >
+            <PauseIcon />
+          </IconButton>
+        </Tooltip>
+      );
+    }
+    
+    // Vendor can mark work as completed
+    if (isVendorAssigned && (status === 'In Progress' || status === 'Paused')) {
+      buttons.push(
+        <Tooltip title="Mark as completed" key="complete">
+          <IconButton
+            color="success"
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('complete');
+            }}
+          >
+            <CompleteIcon />
+          </IconButton>
+        </Tooltip>
+      );
+    }
+    
+    // Admin can verify completed work
+    if (isAdmin && status === 'Completed') {
+      buttons.push(
+        <Tooltip title="Verify completion" key="verify">
+          <IconButton
+            color="secondary"
+            onClick={() => {
+              setSelectedTicket(ticket);
+              handleActionClick('verify');
+            }}
+          >
+            <VerifyIcon />
+          </IconButton>
+        </Tooltip>
+      );
+    }
+    
+    // Add view button for all tickets
+    buttons.push(
+      <Tooltip title="View details" key="view">
+        <IconButton
+          onClick={() => handleViewTicket(ticket.id)}
+        >
+          <VisibilityIcon />
+        </IconButton>
+      </Tooltip>
+    );
+    
+    return buttons;
   };
 
   return (
@@ -688,6 +764,7 @@ const Tickets = () => {
                 >
                   <MenuItem value="">All Statuses</MenuItem>
                   <MenuItem value="New">New</MenuItem>
+                  <MenuItem value="Accepted">Accepted</MenuItem>
                   <MenuItem value="Assigned">Assigned</MenuItem>
                   <MenuItem value="In Progress">In Progress</MenuItem>
                   <MenuItem value="Paused">Paused</MenuItem>
@@ -793,13 +870,7 @@ const Tickets = () => {
                   </TableCell>
                   <TableCell>{getVendorName(ticket.assignedVendorId)}</TableCell>
                   <TableCell>
-                    <IconButton
-                      color="primary"
-                      onClick={() => handleViewTicket(ticket.id)}
-                      title="View Ticket"
-                    >
-                      <VisibilityIcon />
-                    </IconButton>
+                    {renderActionButtons(ticket)}
                   </TableCell>
                 </TableRow>
               ))
@@ -1145,7 +1216,7 @@ const Tickets = () => {
                         workOrder.type.charAt(0).toUpperCase() + workOrder.type.slice(1)
                       }
                       secondary={
-                        <>
+                        <React.Fragment>
                           {formatDate(workOrder.timestamp)}
                           {workOrder.note && (
                             <Typography variant="body2" component="div">
@@ -1157,7 +1228,7 @@ const Tickets = () => {
                               Verified by: {workOrder.verifiedBy}
                             </Typography>
                           )}
-                        </>
+                        </React.Fragment>
                       }
                     />
                   </ListItem>
@@ -1183,13 +1254,21 @@ const Tickets = () => {
       {/* Action Dialog */}
       <Dialog open={actionDialogOpen} onClose={handleCloseActionDialog} maxWidth="sm" fullWidth>
         <DialogTitle>
-          {actionType === 'assign' && 'Assign Ticket'}
+          {actionType === 'accept' && 'Accept Ticket'}
+          {actionType === 'assign' && 'Assign Ticket to Vendor'}
+          {actionType === 'assign_tech' && 'Assign Technician'}
           {actionType === 'start' && 'Start Work'}
           {actionType === 'pause' && 'Pause Work'}
           {actionType === 'complete' && 'Complete Work'}
           {actionType === 'verify' && 'Verify Completion'}
         </DialogTitle>
         <DialogContent>
+          {actionType === 'accept' && (
+            <Alert severity="info">
+              You are about to accept this ticket. Once accepted, you will be responsible for assigning it to a vendor.
+            </Alert>
+          )}
+          
           {actionType === 'assign' && (
             <FormControl fullWidth margin="normal" required>
               <InputLabel id="vendor-label">Vendor</InputLabel>
@@ -1215,6 +1294,31 @@ const Tickets = () => {
             </FormControl>
           )}
           
+          {actionType === 'assign_tech' && (
+            <FormControl fullWidth margin="normal" required>
+              <InputLabel id="tech-label">Technician</InputLabel>
+              <Select
+                labelId="tech-label"
+                id="technician"
+                value={selectedTechnician}
+                label="Technician"
+                onChange={(e) => setSelectedTechnician(e.target.value)}
+              >
+                {technicians.length === 0 ? (
+                  <MenuItem disabled value="">
+                    No technicians available. Please add technicians first.
+                  </MenuItem>
+                ) : (
+                  technicians.map((tech) => (
+                    <MenuItem key={tech.id} value={tech.id}>
+                      {tech.name}
+                    </MenuItem>
+                  ))
+                )}
+              </Select>
+            </FormControl>
+          )}
+          
           {(actionType === 'pause' || actionType === 'complete') && (
             <TextField
               margin="normal"
@@ -1242,6 +1346,7 @@ const Tickets = () => {
             variant="contained"
             disabled={
               (actionType === 'assign' && !selectedVendor) ||
+              (actionType === 'assign_tech' && !selectedTechnician) ||
               ((actionType === 'pause' || actionType === 'complete') && !actionNote)
             }
           >
diff --git a/src/pages/VendorDetail.js b/src/pages/VendorDetail.js
index e5828e4..d1311c4 100644
--- a/src/pages/VendorDetail.js
+++ b/src/pages/VendorDetail.js
@@ -1,4 +1,4 @@
-import React, { useState } from 'react';
+import React, { useState, useEffect } from 'react';
 import { useParams, useNavigate } from 'react-router-dom';
 import {
   Box,
@@ -30,11 +30,23 @@ import {
   TableContainer,
   TableHead,
   TableRow,
-  Chip
+  Chip,
+  Grid
 } from '@mui/material';
 import {
   ArrowBack as ArrowBackIcon,
-  Add as AddIcon
+  Add as AddIcon,
+  Person as PersonIcon,
+  BusinessCenter as BusinessCenterIcon,
+  AssignmentTurnedIn as AssignmentIcon,
+  Build as BuildIcon,
+  Phone as PhoneIcon,
+  Email as EmailIcon,
+  CheckCircle as CheckCircleIcon,
+  Cancel as CancelIcon,
+  Store as VendorIcon,
+  Visibility as VisibilityIcon,
+  Business as BusinessIcon
 } from '@mui/icons-material';
 import { useData } from '../context/DataContext';
 
@@ -69,7 +81,11 @@ const VendorDetail = () => {
     addTechnician,
     isEmailUnique,
     isPhoneUnique,
-    isPasswordStrong
+    isPasswordStrong,
+    getTickets,
+    getTicket,
+    getLocation,
+    getVendorTickets
   } = useData();
 
   // State
@@ -84,6 +100,17 @@ const VendorDetail = () => {
     orgContextIds: []
   });
   const [formErrors, setFormErrors] = useState({});
+  const [tickets, setTickets] = useState([]);
+  const [selectedTicket, setSelectedTicket] = useState(null);
+  const [ticketDetailOpen, setTicketDetailOpen] = useState(false);
+  
+  // Fetch tickets assigned to this vendor
+  useEffect(() => {
+    if (id) {
+      const vendorTickets = getVendorTickets(id);
+      setTickets(vendorTickets || []);
+    }
+  }, [id, getVendorTickets]);
 
   // Get vendor data
   const vendor = getVendor(id);
@@ -106,6 +133,32 @@ const VendorDetail = () => {
   const technicians = getTechnicians(id);
   const organizations = getOrganizations();
   const vendorOrgs = organizations.filter(org => vendor.orgIds.includes(org.id));
+  
+  // Format date helper
+  const formatDate = (dateString) => {
+    if (!dateString) return 'N/A';
+    const date = new Date(dateString);
+    return date.toLocaleString();
+  };
+  
+  // Get location name helper
+  const getLocationName = (locationId) => {
+    if (!locationId) return 'Unknown';
+    const location = getLocation(locationId);
+    return location ? location.name : 'Unknown';
+  };
+  
+  // View ticket details
+  const handleViewTicket = (ticket) => {
+    setSelectedTicket(ticket);
+    setTicketDetailOpen(true);
+  };
+  
+  // Close ticket details dialog
+  const handleCloseTicketDetail = () => {
+    setTicketDetailOpen(false);
+    setSelectedTicket(null);
+  };
 
   // Handle tab change
   const handleTabChange = (event, newValue) => {
@@ -129,67 +182,64 @@ const VendorDetail = () => {
 
   // Handle org context selection
   const handleOrgContextChange = (event) => {
-    const {
-      target: { value },
-    } = event;
+    const { value } = event.target;
     setTechnicianForm(prev => ({
       ...prev,
-      orgContextIds: typeof value === 'string' ? value.split(',') : value,
+      orgContextIds: value
     }));
   };
 
   // Validate technician form
   const validateTechnicianForm = () => {
     const errors = {};
-
-    // Check required fields
-    if (!technicianForm.name) errors.name = 'Name is required';
-    if (!technicianForm.email) errors.email = 'Email is required';
-    if (!technicianForm.phone) errors.phone = 'Phone is required';
-    if (!technicianForm.password) errors.password = 'Password is required';
-    if (!technicianForm.confirmPassword) errors.confirmPassword = 'Please confirm password';
-
-    // Check email format
-    if (technicianForm.email && !/\S+@\S+\.\S+/.test(technicianForm.email)) {
-      errors.email = 'Email is not valid';
+    
+    // Name validation
+    if (!technicianForm.name) {
+      errors.name = 'Name is required';
     }
-
-    // Check email uniqueness
-    if (technicianForm.email && !isEmailUnique(technicianForm.email)) {
+    
+    // Email validation
+    if (!technicianForm.email) {
+      errors.email = 'Email is required';
+    } else if (!/\S+@\S+\.\S+/.test(technicianForm.email)) {
+      errors.email = 'Email is invalid';
+    } else if (!isEmailUnique(technicianForm.email)) {
       errors.email = 'Email is already in use';
     }
-
-    // Check phone uniqueness
-    if (technicianForm.phone && !isPhoneUnique(technicianForm.phone)) {
+    
+    // Phone validation
+    if (!technicianForm.phone) {
+      errors.phone = 'Phone is required';
+    } else if (!isPhoneUnique(technicianForm.phone)) {
       errors.phone = 'Phone number is already in use';
     }
-
-    // Check password strength
-    if (technicianForm.password && !isPasswordStrong(technicianForm.password)) {
+    
+    // Password validation
+    if (!technicianForm.password) {
+      errors.password = 'Password is required';
+    } else if (!isPasswordStrong(technicianForm.password)) {
       errors.password = 'Password must be at least 8 characters with at least one letter and one number';
     }
-
-    // Check if passwords match
-    if (technicianForm.password && technicianForm.confirmPassword && 
-        technicianForm.password !== technicianForm.confirmPassword) {
+    
+    // Confirm password validation
+    if (technicianForm.password !== technicianForm.confirmPassword) {
       errors.confirmPassword = 'Passwords do not match';
     }
-
+    
     return errors;
   };
 
   // Submit technician form
   const handleTechnicianSubmit = () => {
-    // Validate form
-    const errors = validateTechnicianForm();
+    const validationErrors = validateTechnicianForm();
     
-    if (Object.keys(errors).length > 0) {
-      setFormErrors(errors);
+    if (Object.keys(validationErrors).length > 0) {
+      setFormErrors(validationErrors);
       return;
     }
-
+    
     try {
-      // Add technician
+      // Add the technician
       addTechnician({
         name: technicianForm.name,
         email: technicianForm.email,
@@ -198,7 +248,7 @@ const VendorDetail = () => {
         vendorId: id,
         orgContextIds: technicianForm.orgContextIds
       });
-
+      
       // Reset form and close dialog
       setTechnicianForm({
         name: '',
@@ -217,76 +267,199 @@ const VendorDetail = () => {
 
   return (
     <Box>
-      {/* Header */}
-      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
+      {/* Breadcrumbs */}
+      <Breadcrumbs sx={{ mb: 2 }}>
+        <Link 
+          component="button"
+          variant="body1"
+          onClick={() => navigate('/vendors')}
+          underline="hover"
+          sx={{ display: 'flex', alignItems: 'center' }}
+        >
+          <VendorIcon sx={{ mr: 0.5 }} fontSize="inherit" />
+          Vendors
+        </Link>
+        <Typography color="text.primary" sx={{ display: 'flex', alignItems: 'center' }}>
+          {vendor.name}
+        </Typography>
+      </Breadcrumbs>
+
+      {/* Vendor Detail Header */}
+      <Box sx={{ mb: 3, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
         <Box>
-          <Breadcrumbs aria-label="breadcrumb">
-            <Link 
-              underline="hover" 
-              color="inherit" 
-              onClick={() => navigate('/vendors')}
-              sx={{ cursor: 'pointer' }}
-            >
-              Vendors
-            </Link>
-            <Typography color="text.primary">{vendor.name}</Typography>
-          </Breadcrumbs>
-          <Typography variant="h4" component="h1" sx={{ mt: 1 }}>
+          <Typography variant="h4" component="h1">
             {vendor.name}
           </Typography>
-          <Typography variant="body1" color="text.secondary">
-            {vendor.email} • {vendor.phone}
-          </Typography>
+          <Box sx={{ display: 'flex', gap: 2, mt: 1 }}>
+            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+              <EmailIcon fontSize="small" sx={{ mr: 0.5, color: 'text.secondary' }} />
+              <Typography variant="body2" color="text.secondary">{vendor.email}</Typography>
+            </Box>
+            <Box sx={{ display: 'flex', alignItems: 'center' }}>
+              <PhoneIcon fontSize="small" sx={{ mr: 0.5, color: 'text.secondary' }} />
+              <Typography variant="body2" color="text.secondary">{vendor.phone}</Typography>
+            </Box>
+            <Chip 
+              label={vendor.status || 'Active'} 
+              color={vendor.status === 'inactive' ? 'error' : 'success'}
+              size="small"
+            />
+            <Chip 
+              label={`Tier ${vendor.tier || '1'}`} 
+              color="primary"
+              size="small"
+              variant="outlined"
+            />
+          </Box>
         </Box>
-        <IconButton 
-          aria-label="back"
+        <Button 
+          startIcon={<ArrowBackIcon />} 
+          variant="outlined"
           onClick={() => navigate('/vendors')}
         >
-          <ArrowBackIcon />
-        </IconButton>
+          Back to Vendors
+        </Button>
       </Box>
 
-      {/* Associated Organizations */}
-      <Paper sx={{ p: 2, mb: 3 }}>
-        <Typography variant="h6" gutterBottom>
-          Associated Organizations
-        </Typography>
-        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
-          {vendorOrgs.length > 0 ? (
-            vendorOrgs.map(org => (
-              <Chip 
-                key={org.id} 
-                label={org.name} 
-                color="primary" 
-                onClick={() => navigate(`/organizations/${org.id}`)}
-                sx={{ cursor: 'pointer' }}
-              />
-            ))
-          ) : (
-            <Typography variant="body2" color="text.secondary">
-              Not associated with any organizations
-            </Typography>
-          )}
+      {/* Main content with tabs */}
+      <Paper sx={{ width: '100%' }}>
+        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
+          <Tabs value={tabValue} onChange={handleTabChange} aria-label="vendor detail tabs" sx={{ textTransform: 'uppercase' }}>
+            <Tab label="Details" />
+            <Tab label="Assigned Tickets" />
+            <Tab label="Technicians" />
+          </Tabs>
         </Box>
-      </Paper>
 
-      {/* Tabs navigation */}
-      <Paper sx={{ width: '100%', mb: 2 }}>
-        <Tabs 
-          value={tabValue} 
-          onChange={handleTabChange}
-          indicatorColor="primary"
-          textColor="primary"
-          variant="scrollable"
-          scrollButtons="auto"
-        >
-          <Tab label="Technicians" />
-          <Tab label="Work Orders" disabled />
-          <Tab label="Invoices" disabled />
-        </Tabs>
+        {/* Details Tab */}
+        <TabPanel value={tabValue} index={0}>
+          <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(2, 1fr)', gap: 3 }}>
+            <Box>
+              <Paper variant="outlined" sx={{ p: 2 }}>
+                <Typography variant="h6">Vendor Information</Typography>
+                <Box sx={{ mt: 2 }}>
+                  <Typography variant="body1"><strong>Email:</strong> {vendor.email}</Typography>
+                  <Typography variant="body1"><strong>Phone:</strong> {vendor.phone}</Typography>
+                  <Typography variant="body1"><strong>Status:</strong> 
+                    <Chip 
+                      label={vendor.status || 'Active'} 
+                      color={vendor.status === 'inactive' ? 'error' : 'success'}
+                      size="small"
+                      sx={{ ml: 1 }}
+                    />
+                  </Typography>
+                  <Typography variant="body1"><strong>Tier:</strong> {vendor.tier || '1'}</Typography>
+                  {vendor.specialties && (
+                    <Typography variant="body1"><strong>Specialties:</strong> {vendor.specialties}</Typography>
+                  )}
+                </Box>
+              </Paper>
+            </Box>
+            
+            <Box>
+              <Paper variant="outlined" sx={{ p: 2 }}>
+                <Typography variant="h6">Assigned Organizations</Typography>
+                <Box sx={{ mt: 2 }}>
+                  {vendorOrgs.length === 0 ? (
+                    <Typography variant="body2" color="text.secondary">No organizations assigned</Typography>
+                  ) : (
+                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
+                      {vendorOrgs.map(org => (
+                        <Chip 
+                          key={org.id} 
+                          label={org.name} 
+                          icon={<BusinessIcon />} 
+                          size="small" 
+                        />
+                      ))}
+                    </Box>
+                  )}
+                </Box>
+              </Paper>
+            </Box>
+          </Box>
+        </TabPanel>
+        
+        {/* Assigned Tickets Tab */}
+        <TabPanel value={tabValue} index={1}>
+          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
+            <Typography variant="h6">Assigned Tickets</Typography>
+          </Box>
+          
+          <TableContainer component={Paper} variant="outlined">
+            <Table>
+              <TableHead>
+                <TableRow>
+                  <TableCell>Ticket #</TableCell>
+                  <TableCell>Date/Time</TableCell>
+                  <TableCell>Location</TableCell>
+                  <TableCell>Issue Type</TableCell>
+                  <TableCell>Status</TableCell>
+                  <TableCell>Priority</TableCell>
+                  <TableCell align="center">Actions</TableCell>
+                </TableRow>
+              </TableHead>
+              <TableBody>
+                {tickets.length === 0 ? (
+                  <TableRow>
+                    <TableCell colSpan={7} align="center">
+                      No tickets assigned to this vendor
+                    </TableCell>
+                  </TableRow>
+                ) : (
+                  tickets.map((ticket) => (
+                    <TableRow key={ticket.id}>
+                      <TableCell>{ticket.ticketNo || ticket.id.substring(0, 8)}</TableCell>
+                      <TableCell>{formatDate(ticket.dateTime)}</TableCell>
+                      <TableCell>{getLocationName(ticket.locationId)}</TableCell>
+                      <TableCell>{ticket.issueType}</TableCell>
+                      <TableCell>
+                        <Chip 
+                          label={ticket.status} 
+                          color={
+                            ticket.status === 'New' ? 'error' :
+                            ticket.status === 'Assigned' ? 'warning' :
+                            ticket.status === 'In Progress' ? 'info' :
+                            ticket.status === 'Paused' ? 'default' :
+                            ticket.status === 'Completed' ? 'success' :
+                            ticket.status === 'Verified' ? 'secondary' : 'default'
+                          } 
+                          size="small" 
+                        />
+                      </TableCell>
+                      <TableCell>
+                        <Chip 
+                          label={ticket.priority || 'medium'} 
+                          color={
+                            ticket.priority === 'critical' ? 'error' :
+                            ticket.priority === 'high' ? 'warning' :
+                            ticket.priority === 'medium' ? 'info' :
+                            'default'
+                          } 
+                          size="small" 
+                          variant="outlined"
+                        />
+                      </TableCell>
+                      <TableCell align="center">
+                        <IconButton 
+                          size="small" 
+                          onClick={() => handleViewTicket(ticket)}
+                          color="primary"
+                          title="View Details"
+                        >
+                          <VisibilityIcon fontSize="small" />
+                        </IconButton>
+                      </TableCell>
+                    </TableRow>
+                  ))
+                )}
+              </TableBody>
+            </Table>
+          </TableContainer>
+        </TabPanel>
 
         {/* Technicians Tab */}
-        <TabPanel value={tabValue} index={0}>
+        <TabPanel value={tabValue} index={2}>
           <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
             <Typography variant="h6">Technicians</Typography>
             <Button
@@ -298,7 +471,7 @@ const VendorDetail = () => {
             </Button>
           </Box>
 
-          <TableContainer component={Paper}>
+          <TableContainer component={Paper} variant="outlined">
             <Table>
               <TableHead>
                 <TableRow>
@@ -322,20 +495,25 @@ const VendorDetail = () => {
                       <TableCell>{tech.email}</TableCell>
                       <TableCell>{tech.phone}</TableCell>
                       <TableCell>
-                        <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
-                          {tech.orgContextIds && tech.orgContextIds.map(orgId => {
-                            const org = organizations.find(o => o.id === orgId);
-                            return org ? (
-                              <Chip 
-                                key={orgId} 
-                                label={org.name} 
-                                size="small" 
-                                color="primary" 
-                                variant="outlined" 
-                              />
-                            ) : null;
-                          })}
-                        </Box>
+                        {tech.orgContextIds && tech.orgContextIds.length > 0 ? (
+                          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5 }}>
+                            {tech.orgContextIds.map(orgId => {
+                              const org = organizations.find(o => o.id === orgId);
+                              return org ? (
+                                <Chip 
+                                  key={orgId} 
+                                  label={org.name} 
+                                  size="small" 
+                                  variant="outlined"
+                                />
+                              ) : null;
+                            })}
+                          </Box>
+                        ) : (
+                          <Typography variant="body2" color="text.secondary">
+                            None
+                          </Typography>
+                        )}
                       </TableCell>
                     </TableRow>
                   ))
@@ -344,20 +522,6 @@ const VendorDetail = () => {
             </Table>
           </TableContainer>
         </TabPanel>
-
-        {/* Work Orders Tab (Disabled for MVP) */}
-        <TabPanel value={tabValue} index={1}>
-          <Typography variant="body1">
-            Work Orders functionality will be available in a future update.
-          </Typography>
-        </TabPanel>
-
-        {/* Invoices Tab (Disabled for MVP) */}
-        <TabPanel value={tabValue} index={2}>
-          <Typography variant="body1">
-            Invoices functionality will be available in a future update.
-          </Typography>
-        </TabPanel>
       </Paper>
 
       {/* Add Technician Dialog */}
@@ -482,6 +646,106 @@ const VendorDetail = () => {
           </Button>
         </DialogActions>
       </Dialog>
+
+      {/* Ticket Detail Dialog */}
+      <Dialog
+        open={ticketDetailOpen}
+        onClose={handleCloseTicketDetail}
+        maxWidth="md"
+        fullWidth
+      >
+        {selectedTicket && (
+          <>
+            <DialogTitle>
+              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
+                <Typography variant="h6">Ticket #{selectedTicket.ticketNo || selectedTicket.id.substring(0, 8)}</Typography>
+                <IconButton onClick={handleCloseTicketDetail} size="small">
+                  <CancelIcon />
+                </IconButton>
+              </Box>
+            </DialogTitle>
+            <DialogContent>
+              <Grid container spacing={2} sx={{ mt: 1 }}>
+                <Grid item xs={12} md={6}>
+                  <Paper variant="outlined" sx={{ p: 2 }}>
+                    <Typography variant="subtitle1" gutterBottom>Ticket Information</Typography>
+                    <Typography variant="body2"><strong>Location:</strong> {getLocationName(selectedTicket.locationId)}</Typography>
+                    <Typography variant="body2"><strong>Issue Type:</strong> {selectedTicket.issueType}</Typography>
+                    <Typography variant="body2"><strong>Description:</strong> {selectedTicket.description}</Typography>
+                    <Typography variant="body2"><strong>Date/Time:</strong> {formatDate(selectedTicket.dateTime)}</Typography>
+                    <Typography variant="body2"><strong>Placed By:</strong> {selectedTicket.placedBy}</Typography>
+                    <Typography variant="body2">
+                      <strong>Status:</strong> 
+                      <Chip 
+                        label={selectedTicket.status} 
+                        color={
+                          selectedTicket.status === 'New' ? 'error' :
+                          selectedTicket.status === 'Assigned' ? 'warning' :
+                          selectedTicket.status === 'In Progress' ? 'info' :
+                          selectedTicket.status === 'Paused' ? 'default' :
+                          selectedTicket.status === 'Completed' ? 'success' :
+                          selectedTicket.status === 'Verified' ? 'secondary' : 'default'
+                        } 
+                        size="small" 
+                        sx={{ ml: 1 }}
+                      />
+                    </Typography>
+                  </Paper>
+                </Grid>
+                <Grid item xs={12} md={6}>
+                  <Paper variant="outlined" sx={{ p: 2 }}>
+                    <Typography variant="subtitle1" gutterBottom>Workflow Status</Typography>
+                    <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        {selectedTicket.adminApproved ? 
+                          <CheckCircleIcon color="success" sx={{ mr: 1 }} /> : 
+                          <CancelIcon color="error" sx={{ mr: 1 }} />}
+                        <Typography variant="body2">Admin Approval</Typography>
+                      </Box>
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        {selectedTicket.workOrderCreated ? 
+                          <CheckCircleIcon color="success" sx={{ mr: 1 }} /> : 
+                          <CancelIcon color="error" sx={{ mr: 1 }} />}
+                        <Typography variant="body2">Work Order Created</Typography>
+                      </Box>
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        {selectedTicket.invoiceUploaded ? 
+                          <CheckCircleIcon color="success" sx={{ mr: 1 }} /> : 
+                          <CancelIcon color="error" sx={{ mr: 1 }} />}
+                        <Typography variant="body2">Invoice Uploaded</Typography>
+                      </Box>
+                      <Box sx={{ display: 'flex', alignItems: 'center' }}>
+                        {selectedTicket.finalApprovalRequested ? 
+                          <CheckCircleIcon color="success" sx={{ mr: 1 }} /> : 
+                          <CancelIcon color="error" sx={{ mr: 1 }} />}
+                        <Typography variant="body2">Final Approval Requested</Typography>
+                      </Box>
+                    </Box>
+                  </Paper>
+                </Grid>
+                {selectedTicket.notes && selectedTicket.notes.length > 0 && (
+                  <Grid item xs={12}>
+                    <Paper variant="outlined" sx={{ p: 2 }}>
+                      <Typography variant="subtitle1" gutterBottom>Notes</Typography>
+                      {selectedTicket.notes.map((note, index) => (
+                        <Box key={index} sx={{ mb: 2 }}>
+                          <Typography variant="body2">
+                            <strong>{formatDate(note.date)}</strong> by <strong>{note.by}</strong>
+                          </Typography>
+                          <Typography variant="body2">{note.text}</Typography>
+                        </Box>
+                      ))}
+                    </Paper>
+                  </Grid>
+                )}
+              </Grid>
+            </DialogContent>
+            <DialogActions>
+              <Button onClick={handleCloseTicketDetail}>Close</Button>
+            </DialogActions>
+          </>
+        )}
+      </Dialog>
     </Box>
   );
 };
diff --git a/src/pages/Vendors.js b/src/pages/Vendors.js
index a5ac22e..194e989 100644
--- a/src/pages/Vendors.js
+++ b/src/pages/Vendors.js
@@ -357,7 +357,15 @@ const Vendors = () => {
               </TableRow>
             ) : (
               vendors.map((vendor) => (
-                <TableRow key={vendor.id}>
+                <TableRow 
+                  key={vendor.id} 
+                  onClick={() => navigate(`/vendors/${vendor.id}`)} 
+                  sx={{ 
+                    cursor: 'pointer', 
+                    '&:hover': { backgroundColor: 'rgba(0, 0, 0, 0.04)' },
+                    transition: 'background-color 0.2s'
+                  }}
+                >
                   <TableCell>
                     <Box sx={{ display: 'flex', alignItems: 'center' }}>
                       <VendorIcon color="primary" sx={{ mr: 1 }} />
@@ -399,7 +407,10 @@ const Vendors = () => {
                   <TableCell align="right">
                     <Button 
                       size="small" 
-                      onClick={() => handleOpenDialog(vendor)}
+                      onClick={(e) => {
+                        e.stopPropagation(); // Stop event propagation to prevent row click
+                        handleOpenDialog(vendor);
+                      }}
                     >
                       Manage
                     </Button>
